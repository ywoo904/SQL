
01/12 Weds 

DELETE=> 회원탈퇴 

SELECT ~ FROM (~WHERE) 
-테이블에서 데이터를 추출하는 기능 
-실제 데이터베이스의 내용이 변경되지 않는다.

Workbench => mySQL only 
Schema => database를 지칭

//데이터베이스 삭제하기
DROP DATABASE IF EXISTS market_db;

//마켓 디비를 만들고 사용한다.
CREATE DATABASE market_db;
use market_db;

//핑크로 끝나는 멤버의 이름을 출력해라
SELECT * 
FROM member
where mem_name LIKE '__핑크';]

//에이핑크보다 키가 큰 멤버의 이름과 키를 출력해라
SELECT mem_name, height 
FROM member
where height > ( 
SELECT height 
from member 
where  mem_name = '에이핑크' );

//INSERT, UPDATE, DELETE 사용하는 것 익숙해지기  
INSERT INTO emp VALUES (1, 'wood', 25);

CREATE TABLE vips ( 
vip_id INT AUTO_INCREMENT PRIMARY KEY, 
vip_name CHAR(4), 
age INT 
);

//마지막에 얼마나 데이터가 삽입되었는지
SELECT last_insert_id()

//UPDATE로 멤버 이름 영어로 바꾸기  
UPDATE member
SET mem_name = 'Apink' 
WHERE mem_id= 'APN';

DELETE 
FROM emp 
WHERE emp_id =1;  

#데이터의 유형  
TINYINT -128 ~ 127 
SMALLINT- ?? ~ 32767
INT - 21억
BIGINT- 900경

CHAR - 1 ~ 255 고정길이(자릿수가 고정)   
	CHAR(10)=> 'abc' 10칸을 일단 모두 확보, 3개 사용 후 7자리는 낭비
VARCHAR -1 ~ 16000자(가변길이 문자형) 
	VARCHAR(10) => 'abc' 3자리만 사용 

join은 두개의 테이블을 서로 묶어서 하나의 결과를 만드는 것 
마켓데이터베이스에서 회원테이블과 구매테이블 

#일대 다 관계 FROM buy JOIN member (일대 다 ) 
테이블은 하나로 구성되있는 것보다 여러 정보를 주제에 따라 분리하여 정의하는 것이 효율적이다.
이 분리된 테이블은 서로 관계를 맺고 있다. 
market_db는 회원테이블의 아이디와 구매테이블의 아이디가 일대 다 관계이다 . 
일대다관계란 한쪽 테이블에는 하나의 값만 존재하지만 연결된 다른 테이블에는 
여러개의 값이 존재할 수 있는 관계를 말한다. 즉 한명의 회원이 구매를 여러번 할 수 있다. 
구매테이블의 아이디는 기본키가 아닌 외래키 Foreign Key로 설정해야한다. 
일대 다 관계는 주로 기본키와 외래키로 관계를 맺는다. 
일대 다 관계를 또 다른 표현으로 'PK-FK 관계'로 부르기도 한다 . 

회사원 테이블- 급여 테이블 
학생 테이블- 성적 테이블  
제품 테이블 - 판매 테이블 

//시험*

구매테이블에는 물건을 구매한 회원의 아이디와 물건의 정보만 있다. 
이 물건의 구매자에 대한 정보는 회원 테이블에 있기 때문에 결합하는 것이 조인이다.
구매 테이블에서 어떤 아이디를 가진 사람이 구매한 정보를 얻기 위해서는 다음과 같이 
검색할 수 있다.

//테이블 중 한개의 별만 출력하기 
SELECT member.* 
FROM buy JOIN member 
ON buy.mem_id = member.mem_id
WHERE  buy.mem_id='BLK';

//구매기록이 있는 멤버들의 모든 개인정보를 출력하기 
SELECT B.* 
FROM buy B JOIN member A 
ON B.mem_id = A.mem_id;

//구매기록이 있는 멤버들의 고유한 입력값을 출력하기 
SELECT DISTINCT A.mem_id, A.mem_name, A.addr
FROM buy B JOIN member A 
ON B.mem_id = A.mem_id;

//외부조인 : LEFT/RIGHT OUTER JOIN 왼쪽, 오른쪽 을 다 뽑는다.
SELECT * 
FROM buy A RIGHT OUTER JOIN member B 
ON A.mem_ID = B.mem_ID

//멤버들의 회원정보를 모두 출력하게 한뒤, WHERE~~~ is Null값을 활용하여 
SELECT *
FROM  member A LEFT OUTER JOIN buy B 
ON A.mem_ID = B.mem_ID
;

SELECT A.*
FROM  member A LEFT OUTER JOIN buy B 
ON A.mem_ID = B.mem_ID
WHERE B.num is null
;

제약조건 
PRIMARY KEY
FOREIGN KEY 
UNIQUE
CHECK
DEFAULT
NULL 

-테이블은 기본키, 외래키와 같은 제약조건을 설정할 수 있다. 제약조건은 테이블을 구성하는 
핵심개념으로 잘 활용하면 오류를 줄여 완전한 코드를 만들 수 있다. 

-테이블을 만들 때 구조에 필요한 제약조건을 설정한다. 기본키와 외래키가 대표적인 제약조건이다 . 
기본키는 학번, 사번 ,주민번호 등과 같은 고유한 데이터를 의미하는 열에 설정하고 
외래키는 기본키와 연결되는 열에 지정한다. 

-고유키 PK는 중복되지 않는 열에 지정한다. 

키를 입력하는 열에는 300cm를 넘는 사람은 없다 . 실수로 300이 넘는 값을 입력하는 것을 
방지하는 제약조건을 체크 Check 라고 한다 . 또 국적을 입력하는데 대부분이 한국인데 
매번 입력하기가 귀찮다면 제약조건으로 기본값을 설정할 수 있다 . 값을 반드시 꼭 입력해야하게 
만드는 제약조건을 NOT NULL 제약조건 이라고 한다. 제약조건이 많으면 데이터의 오류가 적고 
튼튼해진다.

CONSTRAINT은 데이터의 무결성을 유지하기 위해 제한하는 조건이다.  

이러한 결함을 미리 방지하기 위해 회원테이블의 아이디를 기본키 PRIMARY KEY로 지정하면 
'중복을 허용하지 않고 NULL값도 허용하지 않음'으로 설정되어 실수로 중복된 아이디를 
넣으려고 하면 입력조차 불가능해진다. 

기본키 제약조건  
-대부분의 테이블은 기본키를 가져야한다. 
없어도 테이블 구성은 가능하지만 실무에서는 기본키를 설정해야 중복된 값을 허용하지 않게 된다.

-기본키는 테이블마다 1개만 가질 수 있다.  
=> 하지만 아이디, 주민번호, 이메일도 있는걸? 

테이블의 특성을 가장 잘 반영하는 열을 선택하는 것이 좋다.
열 이름 뒤에 PRIMARY KEY 를 붙여서 기본키로 설정한다. 

PRIMARY KEY 붙이는법  
1) 열 이름 뒤에 붙이거나 가장 하단에 쓰기 
CREATE TABLE member ( 
product_name char(4) PRIMARY KEY,  
cost int , 
make_date date,
company char (5), 
amount int, 
); 

2) 열 최 하단에 쓰기  
CREATE TABLE member ( 
product_name char(4) ,  
cost int , 
make_date date,
company char (5), 
amount int ,
PRIMARY KEY(product_name) 
); 

3) 테이블 만들고 ALTER절로 바꾸기  
	ALTER TABLE member;
	ADD CONSTRAINT 
	PRIMARY KEY(mem_id); 
 
4) 열 이름 뒤에 붙이거나 가장 하단에 쓰기 
CREATE TABLE member ( 
product_name char(4),  
cost int , 
make_date date,
company char (5), 
amount int, 
CONSTRAINT PRIMARY PK_MEMBER_MEM_ID(mem_ID)       
); 

#FOREIGN KEY (외래키) 
-외래키 제약조건은 두 테이블 사이의 관계를 연결해 주고 그 결과 데이터의 무결성을 보장해주는 
역할을 한다. 외래키가 설정된 열은 반드시 다른 테이블의 기본키 동일하다. 

-기본키가 있는 회원 테이블은 '기준테이블', 외래키가 있는 테이블은 '참조테이블'이라고 부른다.

 기준테이블  구매테이블 
아이디           아이디 
PK                  FK 

-참조테이블이 참조하는 기준테이블의 열은 반드시 기본키 또는 고유키로 설정되어 있어야 한다. 

외래키 설정방법 
1) 가장 하단 삽입 
CREATE TABLE member ( 
product_name char(4),  
cost int , 
make_date date,
company char (5), 
amount int, 
FOREIGN KEY(product_name) REFERENCES member(mem_id)  
); 

2) 테이블 만든 후 ALTER절 활용  
CREATE TABLE member ( 
product_name char(4),  
cost int , 
make_date date,
company char (5), 
amount int, 
); 

ALTER TABLE member
ADD CONSTRAINT FOREIGN KEY(mem_id) REFERENCES member(mem_id);

기본키- 외래키 관계가 설정되면 기준 테이블의 열은 변경되거나 삭제되지 않는다. 
기준테이블의 열이름이 변경될 때 참조 테이블의 열 이름도 자동으로 변경되면 
더 효율적일 것 같다. 즉 회원테이블의 BLK가 PINK로 변경되면 자동으로 구매테이블의 BLK도
PINK로 변경되는 것이다.


고유키 제약조건 (UNIQUE CONSTRAINT) 
-중복되지 않는 유일한 값을 입력해야하는 조건 

UNIQUE KEY 설정방법, 열이름 끝에  
CREATE TABLE member ( 
product_name char(4) PRIMARY KEY ,  
cost int , 
make_date date,
company char (5) UNIQUE, 
amount int, 
); 

CHECK 제약조건- 입력할 때 데이터를 점검하는 기능, 어떤 열에 특정 값이 들어가지 
않도록 하거나 '남/여' 둘중의 하나만 입력되도록 할 수 있다. 

CHECK 설정방법, 
1) 열이름 끝에 CHECK삽입하기 
CREATE TABLE member ( 
product_name char(4) PRIMARY KEY ,  
cost int , 
make_date date,
company char (5) UNIQUE, 
amount int,
gender char(5) CHECK (gender IN('남','여'))
height tinyint CHECK (height > =100) 
); 

2) 테이블을 만든 뒤 
ALTER TABLE member 
ADD CONSTRAINT 
CHECK (gender IN('남','여'))
CHECK (height > =100) 

기본값 Default 
-값을 입력하지 않았을 때 자동으로 입력될 값을 미리 지정해놓는 방법이다. 

Default 사용법  
1) 열 끝에사용 
CREATE TABLE member ( 
product_name char(4) PRIMARY KEY,  
cost int , 
make_date date,
company char (5) DEFAULT '용감한형제들', 
amount int, 
); 

2)테이블 만들고 난 뒤 제약조건 설정 
ALTER TABLE member 
		ALTER COLUMN company SET DEFAULT '용감한형제들' 
ALTER TABLE emp
			ALTER COLUMN age SET DEFAULT 20;

//디폴트값으로 미리 넣었던 age20 이 입력되었다. 
INSERT INTO emp VALUES(4,'NONE',default); 

#널 값 허용 NOT NULL 
CREATE TABLE member ( 
product_name char(4) PRIMARY KEY,  
cost int NOT NULL , 
make_date date,
company char (5), 
amount int, 
); 

#VIEW 가상의 테이블 
일반 사용자의 입장에서는 테이블과 동일하게 보인다. 
=> 테이블의 필요한 내용만 골라서 보이도록 할 수 있다. 

뷰는 테이블과 아주 밀접하게 연관되어 있다. 
뷰는 한번 생성하면 테이블이라고 생각해도 될 정도로 테이블과 동일한 개체로 취급한다.

뷰는 실제 데이터를 가지고 있지 않다. 뷰에 접근하는 순간 select가 실행되고 그 결과가 
화면에 출력되는 방식이다. 뷰는 단순뷰와 복합뷰로 나뉜다. 단순뷰는 하나의 테이블과 연관된 뷰를
의미하고 복합뷰에는 2개 이상의 테이블과 연관된 뷰를 말한다 . 

뷰의 이름만 보고서도 어떤 테이블과 연계된 뷰인지 알 수 있도록 v_접두어를 사용해서
이름을 만든다  v_테이블명 


//뷰 만들기  
CREATE VIEW v_member 
AS 
	 SELECT mem_id, mem_name, addr
     FROM market_db.membner;

//뷰 만든뒤 펼쳐보기 
select * from v_number; <= view 를 테이블처럼 사용한다 . 


// 필요한 열만 추출하여 보거나 조건식을 넣을 수도 있다 . 
결과는 테이블에서 추출하여 보는 것과 동일하다.

뷰를 많이 사용하게 되는 이유... 

1. 보안 Security
- 인터넷 홈쇼핑, 회원의 정보확인, 알바, 모든 정보가 담긴 테이블 전부 사용할 수 있도록 하면
일부 정보에만 접근을 허용하여 불필요한 정보 노출을 막을 수 있다.

2. 복잡한 SQL 을 단순하게 만들 수 있다.
-뷰 작성 시 조건을 사용하게 되면 그뷰를 통한 또 다른 SQL 구문은 좀 더 단순해지는 효과를 
얻을 수 있다. 

3. 뷰의 실제 사용 
-실무에서는 좀 더 복잡하게 사용된다.  

예시)

CREATE VIEW v_viewtest1
AS 
	SELECT B.mem_id 'Member_ID', M.mem_name 'Member Name', 
		   B.prod_name 'Product Name', 
           CONCAT(M.phone1, M.phone2) 'Office Phones'
    FROM buy B INNER JOIN member M 
        ON B.mem_id = M.mem_id;

한번 만들어놓았기 때문에 객체검색이 된다 . 

SELECT DISTINCT `Member_ID`,`Member Name` 
FROM v_viewtest1;

뷰도 삭제할 수 있다.
drop view v_member;

뷰 구조보기  
describe v_viewtest1;

소스보기  
show create view v_viewtest1;

뷰로 데이터 수정/삭제  
DELETE FROM 
FROM v_viewtest1 
WHERE `Member_ID`= 'APN'



